#!/bin/bash
# DO NOT EDIT - This file was automatically generated.

#JAVA='/usr/lib/jvm/java-6-sun-1.6.0.15/jre/bin/java'
[ -n "$JAVA_HOME" ] || JAVA_HOME='${env.JAVA_HOME}'
[ -n "$JRE_HOME" ] || JRE_HOME='/usr/lib/jvm/java-6-sun-1.6.0.15/jre'
#FILE_SEP='/'
#PATH_SEP=':'
#CONFIG_FILE='standard.cfg'
POLYGLOT_JAR='polyglot3.jar'
LPG_JAR='lpg.jar'
ECJ_JAR='ecj.jar'
POLYGLOT_URL='http://polyglot-compiler.googlecode.com/svn/trunk/updates/plugins/polyglot3_3.1.1.jar'
LPG_URL='http://lpg.sourceforge.net/updates/plugins/lpg.runtime_2.0.17.jar'
ECJ_URL='http://download.eclipse.org/eclipse/downloads/drops/R-3.4.1-200809111700/ecj-3.4.1.jar'

UNAME=`uname -smp | sed -e 's/ /,/g'`
FILE_SEP='/'; if [[ "$UNAME" = CYGWIN* ]]; then FILE_SEP='\\'; fi
PATH_SEP=':'; if [[ "$UNAME" = CYGWIN* ]]; then PATH_SEP=';'; fi
[ -n "$X10_PLATFORM" ] || \
case "$UNAME" in
  CYGWIN*,i*86,*) export X10_PLATFORM='win32_x86';;
  Linux,*86*,*) export X10_PLATFORM='linux_x86';;
  Linux,ppc*,*) export X10_PLATFORM='linux_ppc';;
  AIX,*,powerpc) export X10_PLATFORM='aix_ppc';;
  Darwin,*,i*86) export X10_PLATFORM='macosx_x86';;
  Darwin,*,powerpc) export X10_PLATFORM='macosx_ppc';;
  SunOS,*,sparc) export X10_PLATFORM='sunos_sparc';;
  *) echo "Unrecognized platform: '$UNAME'"; exit 1;;
esac
# NOTE: the above assumes that Cygwin==win32 (probably valid)

prog="$(readlink $0 2>&1)"
[ $? -eq 127 -o "$prog" = "" ] && prog="$0"
TOP="$(cd "$(dirname $prog)/.." && pwd)"
if [[ "$UNAME" = CYGWIN* ]]; then TOP="$(cygpath -am "$TOP")"; fi

if [ -n "$JAVA_HOME" -a -e "$JAVA_HOME/bin/java" ]; then
    JAVA="$JAVA_HOME/bin/java"
elif [ -n "$JRE_HOME" -a -e "$JRE_HOME/bin/java" ]; then
    JAVA="$JRE_HOME/bin/java"
else
    echo "JAVA_HOME ($JAVA_HOME) is not pointing to a JRE or a JDK"
    exit 1
fi
if [[ "$UNAME" = CYGWIN* ]]; then JAVA="$(cygpath -au "$JAVA")"; fi
if [[ "$UNAME" = CYGWIN* ]]; then JAVA_HOME="$(cygpath -am "$JAVA_HOME")"; fi

help=""
time=""
verbose=""
extra_cp=""
ext=""
dev=""
rtdev=""
java_args=""
args=""
optimize=""

parse=true
while [ -n "$1" ]; do
    if [ -z "$parse" ]; then
        args="$args '$1'"
        shift
        continue
    fi
    case "$1" in
        -h|-help|--help) help="1"; break;;
        -v|-verbose|--verbose) verbose="1";;
        -t|-time) time="time ";;
        -classpath|-cp) shift; extra_cp="$1";;
        -profile) profile="-Xrunhprof:cpu=samples";;
        -config) shift; config="$1.cfg";;
        -extclass) shift; ext=$1;;
        -dev) dev="true";;
	-x10rt) shift; export X10RT_IMPL=$1;;
        -O|-optimize) optimize="true";;
        -rtdev) rtdev="true";;
        -J*) java_args="${java_args} '${1##-J}'";;
        --) parse=;;
        *) args="$args '$1'";;
    esac
    shift
done

if [ -n "$help" -o -z "$args" ]; then
    cat << EOF
Usage: x10c [options] <source-file>.x10 ...
where [options] includes:
    -sourcepath <path>       source path
    -classpath <path>        search path for class files
    -config <conf>           read configuration <conf> from etc${FILE_SEP}<conf>.cfg
    -version                 print version info
    -x10rt <impl>            select x10rt impl (lapi, pgp, sockets, mpi, standalone)
    -t -time                 display execution time
    -v -verbose --verbose    print verbose debugging information
    -h -help --help          print this message
    -disable <pass>          disable compiler pass <pass>
                             valid passes are: async-elimination
    -dev                     developer mode (use unpackaged X10 libraries)
    -O -optimize             generate optimized code

    Use "x10c -- -help" to get more detailed help on compiler options
EOF
    exit 1
fi

[ -z "$DEXT" ] && DEXT="x10.ExtensionInfo"
[ -z "$ext" ] && ext="$DEXT"

CONFIG_DIR="${TOP}${FILE_SEP}etc"
LIB_DIR="${TOP}${FILE_SEP}lib"

#[ -z "$config" ] && config="${CONFIG_FILE}"
[ -n "$config" ] && config="-Dx10.configuration=\"${CONFIG_DIR}${FILE_SEP}${config}\""

if [ -n "$extra_cp" ]; then
    extra_cp="${PATH_SEP}${extra_cp}"
fi

extargs=""
# [DC] assert should be off by default
# extargs="$extargs -assert"
# FIXME: HACK (at Vijay's request)
# FIXME: [DC] this is now a no-op?
# To be removed once serialization of types is fixed in x10c
# HACK!!! HACK!!! HACK!!! vvv
extargs="$extargs -noserial"
# HACK!!! HACK!!! HACK!!! ^^^

classpath="${CP_OVERRIDE}"
[ -n "$dev" ] && classpath="${classpath}${TOP}${FILE_SEP}..${FILE_SEP}x10.compiler${FILE_SEP}classes${PATH_SEP}${TOP}${FILE_SEP}..${FILE_SEP}x10.runtime${FILE_SEP}classes${PATH_SEP}${TOP}${FILE_SEP}..${FILE_SEP}polyglot3-dev${FILE_SEP}bin${PATH_SEP}${TOP}${FILE_SEP}classes${PATH_SEP}"
classpath="${classpath}${LIB_DIR}${FILE_SEP}x10c.jar${PATH_SEP}${LIB_DIR}${FILE_SEP}x10.jar${PATH_SEP}${LIB_DIR}${FILE_SEP}${POLYGLOT_JAR}${PATH_SEP}${LIB_DIR}${FILE_SEP}${LPG_JAR}${ext_cp}${extra_cp}"

# include x10.jar in sourcepath
[ -z "$X10SOURCES" ] && export X10SOURCES="${LIB_DIR}${FILE_SEP}x10.jar"
[ -z "$rtdev" ] && extargs="$extargs -sourcepath \"${X10SOURCES}\""

[ -z "$MAIN" ] && MAIN="polyglot.main.Main"

# Set flags to generate optimized code if we've been asked to do so.
if [[ "$optimize" = "true" ]]; then
  args=" -BAD_PLACE_RUNTIME_CHECK=false -OPTIMIZE=true $args"
fi

if [[ "$ext" = "x10.ExtensionInfo" ]]; then
  # Java backend
  command="\"$JAVA\" -Xmx512m $config $profile -classpath \"$classpath\" ${java_args} $MAIN -post 'java -jar \"${LIB_DIR}${FILE_SEP}${ECJ_JAR}\" -1.5 -nowarn' -extclass $ext $extargs $args"
else
  # C++ backend
  command="\"$JAVA\" -Xmx512m $config $profile -classpath \"$classpath\" ${java_args} $MAIN -extclass $ext $extargs $args"
fi

[ -n "$verbose" ] && echo "$command"

eval "$time$command"
exit $?

